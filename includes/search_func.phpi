<?php
/*
 * search elementer:
 *	host:		ztarget for søgningen, fx. z3950.dbc.dk:2100
 *	database:	basen der skal søges i, fx. danbib
 *	filter:		????????????
 *	format:		format posterme skal vises i. Bruges typisk istedet for element og syntax
 *			Henviser til formats, hvori syntax og element er specificeret.
 *	formats:	array af format => syntax/element, fx. array("F1" => "xml/line");
 *	syntax:		syntax hvis ikke format bruges
 *	element:	element-set-name hvis ikke format bruges
 *	raw_record:	subs_rec skippes hvis den er sat
 *	sort:		evt. sortering
 *	sort_max:	max antal poster der sorteres
 *	vis_max:	max antal poster der vises
 *	start:		evt. startpos
 *	step:		evt. antal poster ved search eller linier ved scan
 *	ccl:		ccl-søgningen
 *	cclfields:	navn på ccl-2-rpn fil for søgninger
 *	scanfields:	navn på ccl-2-rpn fil for scan
 *  stopords_liste: navn på tekstfil med stopord // bruges ikke
 *	rpn:		rpn repræsentationen af ccl-søgningen - er normalt tom ved kald
 *	xml:		xml-post ifm. xmlupdate
 *	authentication:	user/group/password for brugeren/basen
 *	share_authentication: user/group/password 
 *			er dette sat bruges det som authentication og ovenstående sendes med i otherinfo
 *			Bruges til at dele z-forbindelser mellem brugere
 *  persistent - skal der ventes på svar. Indtil videre kun test
 *	piggyback:	boolean
 *	timeout:	timeout i sekunder
 *	proxy:		hvis proxy anvendes
 *	proxy_cookie:	hvis proxy anvendes
 *	schema:		OID til schema til present
 *	illapdu:	apdu til bestilling
 *   results:
 *	hits:		antal hits
 *	record:		array med returnerede poster
 *  stopord: array med stopord fjernet fra ccl
 *	targetReference: bestillingsnummer
 *	xmlresult:	resultat fra xmlupdate
 *	error:		fejl
 */

//require_once('targets.php');
//require_once('spellcheck_func.phpi');
//require_once("xml_func.phpi");

/*
 * Public
 * ======
 */

// turns search query into google query
// (in the future either by terms or ccl translation)


function verbose()
{
}

function get_google_query(&$set, $site_name) {

			if($site_name=="google") {
				$template_url=getext($site_name."_url");
			} else {
				$template_url=getext("google_".$site_name."_url");
			}
      if (!strpos(" ".$template_url, "http"))
        $template_url = HTTP . $template_url;

			if(isset($set["origin"]) && $set["origin"]=="linkme") {
				$q_a=explode("=",$set["user_ccl"]);
				$query=trim($q_a[1]);
			} else { 
				$terms_array=extract_fields_terms($set);
				$query=$terms_array["query"];
			}

		$query=preg_replace("/[()]/","",$query);
		$query=preg_replace("/ eller /"," OR ",$query);
		$query=preg_replace("/ og /"," ",$query);

		$query=utf8_decode($query);

		$query=urlencode($query);

		$return_url=str_replace("$1",$query,$template_url);
		
  	return $return_url;
}


// Removes noise and returns string with terms seperated by space, phrases are put in quotes.
function extract_fields_terms($set) {
		
		$phrases=array("ldb", "ldf", "lds", "lem", "lfc", "lfo", "lht", "lke", "lme", "lmn", "lpo", "lrc", "lrf", "lri", "lse", "lti", "ltj", "lts");
		$i=0;

  	// look for keys containing term
	  foreach($set as $k => $v) {
		#echo $k.$v."<BR>";
 	   if(preg_match('/^term[0-9]{1}/', $k, $matches) && !empty($v)) {

		 	$term=$v;
			$term_id=$k;
 	    $match_num=preg_replace("/[a-zA-Z]/","",$matches[0]);
	
 	    // see if field value is in phrases
			$field_id="field".$match_num;
			$field=trim($set[$field_id]);
			
 	    if(in_array($field, $phrases)) {
 	      // if yes, we quoted it
 	      $term="\"".$term."\"";
 	    }

			 ####$term=preg_replace("/[a-z]{2,20}\=/"," ",$term);

				// semi ccl parsing
			 if(preg_match("/=/", $term)) {
			 		$tmp_term=preg_replace("/ ikke | eller | og /","#SPLIT_SEPERATOR#",$term);
					$fieldterm_explode=explode("#SPLIT_SEPERATOR#", $tmp_term);
			
					foreach($fieldterm_explode as $k=>$v) {
						$term_explode=explode("=", $v);
						$f=trim($term_explode[0]);
						$t=trim($term_explode[1]);
						$t=utf8_encode($t);
						$array[$field_id][$term_id]=$t;
						$array[$i][$field_id]=$f;
						$array[$i][$term_id]=$t;
					}
			 } // end semi ccl parse

			if(!empty($field))	{
				$term=utf8_encode($term);
				$array[$i][$field_id]=$field;
				$array[$i][$term_id]=$term;
			}
 	    $query.=$term." ";
 	   }
 	 }

	$array["query"]=trim($query);

	#echo "<PRE>"; print_r($array); exit();

  return $array;
}

/* ccl funcs */
function term_explode(&$term) {
  if (gettype($term) != "array")
    return($term);
  else {
    $ret = "";
    foreach ($term as $t) {
      if ($t && !empty($ret)) $ret .= " eller ";
      $ret .= trim($t);
    }
    if ($ret && count($term) > 1) $ret = "(" . $ret . ")";
    return($ret);
  }
}


// Returns num of hits on given search query.
function get_search_hit($query) {
  global $TARGET, $DEFAULT_TARGET;

  if(!empty($target)) {
    $search = $TARGET[$target];
  } else {
    $search = $TARGET[$DEFAULT_TARGET[0]];
  }

  $search["rpn"] = "";
  $search["ccl"] = $query;
  $search["step"] = 0;
  Zsearch($search);

  return $search["hits"];
}


function collect_url_vars($request) {
  return(collect_url($request, CCL_TERMS, CCL_FIELDS, CCL_OPS));
}
function collect_url_limit_vars($request) {
  return(collect_url($request, LIMIT_TERMS, LIMIT_FIELDS, array()));
}
function collect_url($request, $terms, $fields, $ops) {
  $ret = "";
  $a_trm = explode(" ", $terms);
  $a_fld = explode(" ", $fields);
  $a_op = explode(" ", $ops);
  foreach ($a_trm as $idx => $term)
    if (!empty($request[$term])) {
      $op = $a_op[$idx];
      if (!empty($request[$op])) $ret .= "&" . $op . "=" . urlencode($request[$op]);
      $field = $a_fld[$idx];
      if (!empty($request[$field])) $ret .= "&" . $field . "=" . urlencode($request[$field]);
      if (is_array($request[$term])) {
        foreach ($request[$term] as $term_item)
          if (!empty($term_item)) 
            $ret .= "&" . urlencode($term."[]") . "=" . urlencode($term_item);
      }
      else
        $ret .= "&" . $term . "=" . urlencode($request[$term]);
    }

  return($ret);
}

function collect_term_vars($request, $form_based=TRUE) {
  return(collect_term($request,$form_based,CCL_TERMS,CCL_FIELDS,CCL_OPS));
}
function collect_term_term_vars($request, $form_based=TRUE) {
  return(collect_term($request,$form_based,TERM_TERMS,TERM_FIELDS,TERM_OPS));
}
function collect_term_limit_vars($request, $form_based=TRUE) {
  return(collect_term($request,$form_based,LIMIT_TERMS,LIMIT_FIELDS,array()));
}
function collect_term($request, $form_based=TRUE, $terms, $fields, $ops) {
//if (IS_FVS) { echo $ops . "<br>" . $terms; }
  $ret = "";
  $a_trm = explode(" ", $terms);
  $a_fld = explode(" ", $fields);
  $a_op = explode(" ", $ops);

  foreach ($a_trm as $idx => $term) {
    if ($form_based && is_numeric($term[strlen($term)-1]))
      $t = escape_bool(term_explode($request[$term]));
    else
      $t = term_explode($request[$term]);

		if(isset($_REQUEST["utf8_content"]) && $_REQUEST["utf8_content"]==1) 
			$t = utf8_decode($t);
		else 
    	$t = FixUtf8($t);

    $f = $request[$a_fld[$idx]];
    if ($t != "")
      $ret .= (empty($ret) ? "" : " " . $o ." ") . prefix($f) . $t;
    if ($o = $request[$a_op[$idx]]) ; else $o = "og";
  }
  return(trim(stripslashes($ret)));
}

function prefix($f) {
  switch($f) {
    case "year_lt": return("\xe5r<");
    case "year_le": return("\xe5r<=");
    case "year_eq": return("\xe5r=");
    case "year_ge": return("\xe5r>=");
    case "year_gt": return("\xe5r>");
    case "materiale": return("ma=");
    case "kategori": return("kat=");
    case "sprog": return("sp=");
    case "": return ("");
    default: return("$f=");
  }
}

function FixUtf8($t) {
static $iso, $uft8;
  if (empty($iso))
    for ($i = 160; $i < 255; $i++) {
      $iso[] = chr($i);
      $utf8[] = utf8_encode(chr($i));
    }
  return(str_replace($utf8, $iso, $t));
}

function filter_stopord(&$search) {
static $STOP_LIST;
  if (empty($search["stopords_liste"])) return;

  if (is_null($STOP_LIST))
    $STOP_LIST = load_lang_tab($search["stopords_liste"]);
  $ccl = $search["ccl"];
  if (is_array($STOP_LIST))
    foreach ($STOP_LIST as $key => $val) {
      $match_patt = "(^|[ =\(])($key)([ \)]|$)";
      if (eregi($match_patt, $ccl)) {
        $search["stopord"][ $key ] = $key;
        $ccl = eregi_replace($match_patt, '\\1 \\3', $ccl);
      }
    }
  $search["ccl"] = trim($ccl);
}

function escape_bool($term) {
  $bools = array ("og", "eller", "ikke", "and", "or", "not");
  for ($i = 0; $i < count($bools); $i++)
     $term = eregi_replace("(^|[^[:alnum:]])($bools[$i])([^[:alnum:]]|$)", "\\1'\\2'\\3",$term);
  $chars = array ();
  for ($i = 0; $i < count($chars); $i++)
     $term = eregi_replace("($chars[$i])", "'\\1'",$term);
  return($term);
}

function set_from_history($request, &$history) {
  $set = $request["set"];
  if (!is_array($set)) return($history[$set]);
  if (count($set) == 1) return($history[$set[0]]);

  $op = $request["set_op"];
  if (empty($op)) $op = "og";
  foreach ($set as $s) {
    if (!empty($ccl)) $ccl .= " " . $op . " ";
    $ccl .= "(" . $history[$s]["ccl"] . ")";
  }
  $req = array("term1" => $ccl, "origin" => "kommando");
  return($req);
}

function set_history(&$history, $request, $searches) {
  $first_tgt = key($searches);
  if (empty($searches[$first_tgt]["ccl"])) return(0);
  if (!empty($searches[$first_tgt]["error"])) return(0);

  $hist_id = $first_id = 0;
  foreach ($history as $hist_id => $hist) {
    if ( $hist["ccl"] == $searches[$first_tgt]["ccl"] &&
         $hist["target"] == $request["target"] &&
        ($hist["delbase"] == $request["delbase"] || empty($request["delbase"])) )
      return($hist_id);
    if (empty($first_id)) $first_id = $hist_id;
  }

  $hist_id++;
  $a_par = explode(" ", "origin target delbase " . CCL_TERMS . " " . CCL_FIELDS . " " . CCL_OPS);
  foreach ($a_par as $par)
    if (!empty($request[$par])) 
      $history[$hist_id][$par] = (is_scalar($request[$par]) && $_REQUEST["utf8_content"]==1 ? utf8_decode($request[$par]) : $request[$par]);
  $history[$hist_id]["ccl"] = $searches[$first_tgt]["ccl"];
  $history[$hist_id]["user_ccl"] = $searches[$first_tgt]["user_ccl"];
  if (count($searches) == 1)
    $history[$hist_id]["hits"] = $searches[$first_tgt]["hits"];

  if (count($history) > MAX_HISTORY)
    unset($history[$first_id]);

  return($hist_id);
}

/* single target funcs */
function Zsearch(&$search) {
  $searches[] = &$search;
  nZsearch($searches);
}

function Zpresent(&$search) {
  $searches[] = &$search;
  nZpresent($searches);
}

function Zscan(&$search) {
  $searches[] = &$search;
  nZscan($searches);
}

function Zitemorder(&$search) {
  $searches[] = &$search;
  nZitemorder($searches);
}

function Zclose(&$search) {
  $searches[] = &$search;
  nZclose($searches);
}

function Zxmlupdate(&$search) {
  private_Zxmlupdate($search);
  private_wait_n_time($search, "xmlupdate");
  private_Zxmlresult($search);
}

function Zpoll(&$search) {
  $searches[] = &$search;
  nZpoll($searches);
}

/* multi target funcs */
function nZsearch(&$searches) {
  foreach ($searches as $key => $search)
    private_Zsearch($searches[$key]);
  private_wait_n_time($searches, "search");

  foreach ($searches as $key => $search)
    private_Zhits_and_sort($searches[$key]);
  private_wait_n_time($searches, "sort");

  foreach ($searches as $key => $search)
    private_Zpresent($searches[$key]);
  private_wait_n_time($searches, "present");

  $present_retries = PRESENT_RETRIES;
  while ($present_retries) {
    $present_error = FALSE;
    foreach ($searches as $key => $search)
      if (empty($search["error"])) {
        private_Zerror($searches[$key]);
        // generate random error
        // if (rand(1,2) == 1) $searches[$key]["error"] = "random error";
        if ($searches[$key]["error"]) $present_error = TRUE;
      }
    if ($present_error) {
      foreach ($searches as $key => $search)
        if ($search["error"]) {
          verbose(ERROR, "REpresent() error:" . $search["error"] .
                                " addinfo:" . $search["addinfo"] .
                                   " host:" . $search["host"] .
                               " database:" . $search["database"] .
                                   " auth:" . $search["authentication"] .
                                 " format:" . $search["format"] .
                                 " syntax:" . $search["syntax"] .
                                " element:" . $search["element"] .
                                   " sort:" . $search["sort"] .
                                  " start:" . $search["start"] .
                                   " step:" . $search["step"] .
                                    " ccl:" . $search["ccl"] .
                                    " rpn:" . $search["rpn"]);
          unset($searches[$key]["error"]);
          private_Zpresent($searches[$key]);
        }
        $present_retries--;
    } else
      $present_retries = 0;
  }

  foreach ($searches as $key => $search)
    private_Zrecord($searches[$key]);

  foreach ($searches as $key => $search)
    private_Zcertificate($searches[$key]);
}

function nZpresent(&$searches) {
  foreach ($searches as $key => $search)
    private_Zpresent($searches[$key]);
  private_wait_n_time($searches, "present");

  foreach ($searches as $key => $search)
    private_Zrecord($searches[$key]);
}

function nZscan(&$searches) {
  foreach ($searches as $key => $search)
    private_Zscan($searches[$key]);
  private_wait_n_time($searches, "scan");

  foreach ($searches as $key => $search)
    private_Zscan_result($searches[$key]);
}

function nZitemorder(&$searches) {
  foreach ($searches as $key => $search)
    private_Zitemorder($searches[$key]);
  private_wait_n_time($searches, "itemorder");

  foreach ($searches as $key => $search)
    private_Zitemorder_result($searches[$key]);
}

function nZclose(&$searches) {
  foreach ($searches as $key => $search)
    if (yaz_close($search["id"])) unset($searches[$key]["id"]);
}

function nZxmlupdate(&$searches) {
  foreach ($searches as $key => $search)
    private_Zxmlupdate($searches[$key]);
  private_wait_n_time($searches, "xmlupdate");

  foreach ($searches as $key => $search)
    private_Zxmlresult($searches[$key]);
}

function nZpoll(&$searches) {
  foreach ($searches as $key => $search)
    private_Zpoll($searches[$key]);
}

/*
 * Private
 * =======
 */

/* search 
 */
function private_Zsearch(&$search) {
  if (is_resource(private_Zconnect($search))) {
    if (!$search["rpn"]) {
      if (!private_ccl2rpn($search, "cclfields")) {
        return FALSE;
      }
      if ($search["filter"]) 
        $search["database"] = $search["filter"];
    }
    yaz_database($search["id"], $search["database"]);
    yaz_sort($search["id"], "");
    yaz_range($search["id"], 1, 0);
    yaz_search($search["id"],"rpn",$search["rpn"]);
    verbose(Z3950, "Zsearch() host:" . $search["host"] .
                        " database:" . $search["database"] .
                            " auth:" . $search["authentication"] .
                          " format:" . $search["format"] .
                          " syntax:" . $search["syntax"] .
                         " element:" . $search["element"] .
                            " sort:" . $search["sort"] .
                           " start:" . $search["start"] .
                            " step:" . $search["step"] .
                             " ip:"  . $_SERVER["REMOTE_ADDR"] .
                             " ccl:" . $search["ccl"] .
                             " rpn:" . $search["rpn"]);
  } else {
    $search["error"] = "Connect failed";
  }
}

function private_Zhits_and_sort(&$search) {
  private_Zerror($search);				// fetch errror from search
  if ($search["id"] && empty($search["error"])) {
    $search["hits"] = yaz_hits($search["id"]);
    if ($search["sort"] && (int) $search["sort_max"] >= (int) $search["hits"])
      yaz_sort($search["id"], $search["sort"]);
  }
}

function private_Zpresent(&$search) {

  if ($search["id"] && empty($search["error"])) {
    if ($search["sort"])
      if ((int) $search["sort_max"] < (int) $search["hits"])
        $search["sort_error"] = 230;
      else
        $search["sort_error"] = yaz_error($search["id"]);		// fecth error from sort
    else
      private_Zerror($search);

    if ($search["vis_max"] 
     && (int) $search["vis_max"] < (int) $search["hits"]) {
      $search["errno"] = "31";
      $search["error"] = errno_2_text($search["errno"], "Resources exhausted - no results available");
    } else {
      if (isset($search["fallback_format_max"])
       && (int) $search["fallback_format_max"] < (int) $search["hits"]
       && isset($search["fallback_format"][ $search["format"] ])) {
        $search["fallback_from_format"] = $search["format"];
        $search["format"] = $search["fallback_format"][ $search["format"] ];
        $search["fallback_format_text"] = TRUE;
      }
      if (isset($search["format_mapping"][ $search["format"] ]))
        $search["format"] = $search["format_mapping"][ $search["format"] ];
      if (isset($search["format"]) 
       && (empty($search["syntax"]) || empty($search["element"])))
        list($search["syntax"], $search["element"]) = explode("/", $search["formats"][strtolower($search["format"])]);
      if ($search["bibkode"] && empty($search["no_bib_id_split"]))
        $search["element"] .= ":" . $search["bibkode"];
      if (empty($search["cache_records"]) || !is_file($search["cache_records"] . "_" . $search["database"])) {
        yaz_syntax($search["id"], $search["syntax"]);
        yaz_element($search["id"], $search["element"]);
        if (empty($search["start"])) $search["start"] = 1;
        $step = min($search["step"], $search["hits"]-$search["start"]+1);
        yaz_range($search["id"], intval($search["start"]), intval($step));
        if (isset($search["schema"]))
          yaz_schema($search["id"],$search["schema"]);
        yaz_present($search["id"]);
      }
    }
  }
}

function private_Zrecord(&$search) {
  private_Zerror($search);
  if ($search["id"] && $search["step"] && empty($search["error"])) {
    $cache_file_name = $search["cache_records"] . "_" . $search["database"];
    if ($search["cache_records"] && is_file($cache_file_name)) {
      $search["records"] = cache_2_records($cache_file_name);
    } else {
      $end = min($search["start"] + $search["step"] - 1, $search["hits"]);
      for ($r = $search["start"]; $r <= $end; $r++) {
        $search["records"][$r]["record"] = yaz_record($search["id"], $r, "raw");
        if (empty($search["raw_record"]))
          private_subs_rec($search["records"][$r]["record"], $search["target"], $search["cdata"], $search["record_sub"], $search["limit_url_vars"]);
        $search["records"][$r]["error"] = yaz_error($search["id"]);
      }
      if ($search["cache_records"])
        records_2_cache($cache_file_name, $search["records"]);
    }
  }
}

function cache_2_records($fname) {
global $stopur;
  if (is_object($stopur)) $stopur->start("from_cache");
  if ($fp = @ fopen($fname, "r")) {
    $ret = unserialize(fread($fp, filesize($fname)));
    fclose($fp);
    if (is_object($stopur)) $stopur->stop("from_cache");
    return $ret;
  } 
  if (is_object($stopur)) $stopur->stop("from_cache");
  return FALSE;
}
function records_2_cache($fname, &$recs) {
global $stopur;
  if (is_object($stopur)) $stopur->start("to_cache");
  if ($fp = @ fopen($fname, "w")) {
    fwrite($fp, serialize($recs));
    fclose($fp);
    if (is_object($stopur)) $stopur->stop("to_cache");
    return TRUE;
  }
  if (is_object($stopur)) $stopur->stop("to_cache");
  return FALSE;
}
function private_Zcertificate(&$search) {
  if ($search["id"] && empty($search["error"]) && isset($search["get_option"])) {
     $opt = $search["get_option"];
     $search[$opt] = yaz_get_option($search["id"], $opt);
  }
}

/* scan 
 */
function private_Zscan(&$search) {
  if (is_resource(private_Zconnect($search))) {
    if (!$search["rpn"]) {
      $search["ccl"] = escape_bool($search["ccl"]);
      if (!private_ccl2rpn($search, "scanfields")) {
        unset($search["error"]);
        if (!private_ccl2rpn($search, "cclfields"))
            return FALSE;
      }
      if ($search["filter"]) 
        $search["database"] = $search["filter"];
    }
    yaz_database($search["id"], $search["database"]);
    $flags["number"] = $search[ "step" ];
    yaz_scan($search["id"], "rpn", $search["rpn"], $flags);
    verbose(Z3950, "Zscan() host:" . $search["host"] .
                      " database:" . $search["database"] .
                          " auth:" . $search["authentication"] .
                     " scan_step:" . $search["scan_step"] .
                           " ccl:" . $search["ccl"] .
                           " rpn:" . $search["rpn"]);
  } else {
    $search["error"] = "Connect failed";
  }
}

function private_Zscan_result(&$search) {
  private_Zerror($search);					// fetch errror from scan
  if ($search["id"] && empty($search["error"])) {
    $search["records"] = yaz_scan_result($search["id"], $result_options);
  }
}

/* item order 
 */
function private_Zitemorder(&$search) {
  if (is_resource(private_Zconnect($search))) {
    yaz_itemorder($search["id"], $search["illapdu"]);
    verbose(Z3950, "Zitemorder() host:" . $search["host"] .
                           " database:" . $search["database"] .
                               " auth:" . $search["authentication"]);

  } else {
    $search["error"] = "Connect failed";
  }
}

function private_Zitemorder_result(&$search) {
  private_Zerror($search);					// fetch errror from itemorder
  if ($search["id"] && empty($search["error"])) {
    $ar = yaz_es_result($search["id"]);
    $search["targetReference"] = $ar["targetReference"];
  }
}

/* extended services
 */
function private_Zxmlupdate(&$search) {
  if (is_resource(private_Zconnect($search))) {
    $args = array("doc" => '<?xml version="1.0" encoding="ISO-8859-1" ?>' . $search["xml"]);
    yaz_es($search["id"], "xmlupdate", $args);
    verbose(Z3950, "Zxmlupdate() host:" . $search["host"]);
  } else {
    $search["error"] = "Connect failed";
  }
}
function private_Zxmlresult(&$search) {
  private_Zerror($search);
  if ($search["id"] && empty($search["error"])) {
    $ar = yaz_es_result($search["id"]);
    $search["xmlresult"] = $ar["xmlUpdateDoc"];
  }
}

/* Async poll - test kode, virker ikke
 */
function private_Zpoll(&$search) {
  $opts["event"] = TRUE;
  $id = yaz_wait($opts);
  if ($id) {
    switch($opts[eventcode]) {
      case ZOOM_EVENT_CONNECT: echo "connect"; break;
      case ZOOM_EVENT_SEND_DATA: echo "send data"; break;
      case ZOOM_EVENT_RECV_DATA: echo "recv data"; break;
      case ZOOM_EVENT_TIMEOUT: echo "timeout"; break;
      case ZOOM_EVENT_UNKNOWN: echo "unknown"; break;
      case ZOOM_EVENT_SEND_APDU: echo "send apdu"; break;
      case ZOOM_EVENT_RECV_APDU: echo "recv apdu"; break;
      case ZOOM_EVENT_RECV_SEARCH: echo "recv search"; break;
      case ZOOM_EVENT_RECV_RECORD: echo "recv record"; break;
      default: echo "UNKNOWN"; break;
    }
    echo " for id: " . $id . " - \n";
  }
}

/* connect 
 * Som default sendes user/group/password som yaz_connect parametre - ved ip-login cleares user/group/password
 * ved share_authentication sendes user/group/password i otherinfo0 med yaz_connect sættes fra share_authentication  - ved ip-login ?
 */
function private_Zconnect(&$search) {
  if (empty($search["id"])) {
    $Zopt = array ();
    if (defined("DEFAULT_SHARE_AUTHENTICATION") && empty($search["remote_target"])) {
      list($Zopt["user"], $Zopt["group"], $Zopt["password"]) = explode("/", DEFAULT_SHARE_AUTHENTICATION);
      $Zopt[ "otherInfo1" ] = "1.2.840.10003.10.1000.105.1:" . $search["authentication"];
    } else {
      list($Zopt["user"], $Zopt["group"], $Zopt["password"]) = explode("/", $search["authentication"]);
    }
    if (isset($_SERVER["REMOTE_ADDR"])) $Zopt[ "otherInfo0" ] = "1.2.840.10003.10.1000.81.3:" . $_SERVER["REMOTE_ADDR"];
    if (isset($search["yaz_cookie"])) $Zopt["cookie"] = $search["yaz_cookie"];
    if (isset($search["yaz_proxy"])) $Zopt["proxy"] = $search["yaz_proxy"];
    if (isset($search["charset"])) $Zopt["charset"] = $search["charset"];
    $Zopt["piggyback"] = (isset($search["piggyback"]) ? $search["piggyback"] : TRUE);
    $Zopt["persistent"] = (isset($search["persistent"]) ? $search["persistent"] : TRUE);
    if (isset($search["preferredMessageSize"])) $Zopt["preferredMessageSize"] = $search["preferredMessageSize"];
    if (isset($search["maximumRecordSize"])) $Zopt["maximumRecordSize"] = $search["maximumRecordSize"];
  
    $search["connect_options"] = $Zopt;

    $tgt_db = $search["host"];
    if ($search["database"]) $tgt_db .= "/" . $search["database"];
    $search["id"] = yaz_connect($tgt_db, $search["connect_options"]);
  }
  return($search["id"]);
}

/* wait og start/stop timer
 */
function private_wait_n_time(&$searches, $timer) {
global $stopur, $SESSION;

  $max = 20;
	$allow_user_break = TRUE;
	$event = FALSE;
  if ($searches["host"]) {
    $max = max($max, $searches["timeout"]);
		$allow_user_break = $allow_user_break && $searches["allow_user_break"];
  } else
    foreach ($searches as $key => $search) {
      $max = max($max, $search["timeout"]);
		  $allow_user_break = $allow_user_break && $search["allow_user_break"];
      $event = $event || !$search["connect_options"]["persistent"];
	  }

  if (is_object($stopur)) $stopur->start($timer);
  $opt = array("timeout" => $max, "event" => $event);

	// close session temporaily to avoid hanging...
	if ($allow_user_break && !$event) 
		session_write_close();
	
  yaz_wait($opt);

	// restart session
	if ($allow_user_break && !$event) {
		session_start();
		$SESSION = &$_SESSION["SESSION"];
	}

  if (is_object($stopur)) $stopur->stop($timer);
}

/* error 
 */
function private_Zerror(&$search) {
//static $Z_ERROR_TAB;
  if ($search["id"] && empty($search["error"])) {
    if ($search["error"] = yaz_error($search["id"])) {
      $search["errno"] = yaz_errno($search[ "id" ]);
      $search["addinfo"] = yaz_addinfo($search[ "id" ]);
      $search["error"] = errno_2_text($search["errno"], $search["error"]);
      //if (!isset($Z_ERROR_TAB)) $Z_ERROR_TAB = load_lang_tab("z_errors");
      //if (isset($Z_ERROR_TAB[$search["errno"]]))
        //$search["error"] = $Z_ERROR_TAB[$search["errno"]];
      //else
        //$search["error"] .= " (" . $search["errno"] . ")";
    }
  }
}

function errno_2_text($no, $txt) {
static $Z_ERROR_TAB;
  if (!isset($Z_ERROR_TAB))
    if (function_exists("load_lang_tab"))
      $Z_ERROR_TAB = load_lang_tab("z_errors");
    else
      $Z_ERROR_TAB = array();
  if (isset($Z_ERROR_TAB[$no]))
    return($Z_ERROR_TAB[$no]);
  else
    return($txt . " (" . $no . ")");
}

/* ccl parse
 */
function private_ccl2rpn(&$search, $zop) {
static $CCL_ERROR_TAB;



  if (private_load_attrset($search, $zop)) {
    filter_stopord($search);
    if (yaz_ccl_parse($search["id"], $search["ccl"], $result)) {
      $search["rpn"] = $result["rpn"];

     
    } else {
      $pos = $result["errorpos"] + 1 . "s";
      $search["errno"] = $result["errorcode"];
      $search["addinfo"] = $result["errorstring"];
      $search["error"] = "ccl-error";
      if (!isset($CCL_ERROR_TAB)) $CCL_ERROR_TAB = load_lang_tab("ccl_errors");
      if (isset($CCL_ERROR_TAB[$result["errorcode"]]))
        $search["ccl_error"] = sprintf("%s<br/>%'-$pos &nbsp %s", strip_tags($search["ccl"]), "^", $CCL_ERROR_TAB[$result["errorcode"]]);
      else
        $search["ccl_error"] = sprintf("%s<br/>%'-$pos &nbsp %s (%d)", htmlentities($search["ccl"]), "^", $result["errorstring"], $result["errorcode"]);
    }
  }
  return(empty($search["error"]));
}

/* load ccl2rpn file
 *
 * u=use r=relation p=position s=structure t=truncation c=completeness
 */
define ("DBC1", "1.2.840.10003.3.1000.105.1");
function private_load_attrset(&$search, $zop) {
  global $CCL_PATH, $init_attr_set, $dup_attr;



  if ($search[$zop]) {
    if (substr($search[$zop], 0, 5) == "Z3950") {
      $ccl_fn = private_z3959_load_attrset($search, substr($search[$zop], 5));
    } else {

      // pjo; changed path for testpurposes
      // echo "TESTHESETESTN";
      $ccl_fn="includes/".$search[$zop];

      //  $ccl_fn = $CCL_PATH . '/' . $search[$zop];
    }


    if ($ccl_fn && $fp = @ fopen($ccl_fn, "r")) {
      $attr_set = $init_attr_set;
      while ( ! feof($fp) ) {
        list($line) = explode("#", fgets($fp, 9999), 2);
        if (trim($line)) {
          $line = str_replace("DBC1", DBC1, $line);
          list($attr_code, $attr_val) = explode(" ", $line, 2);
          $attr_set[ $attr_code ] = $attr_val;
          while (isset($dup_attr[ $attr_code ])) {
            $attr_set[ $dup_attr[ $attr_code ] ] = $attr_val;
            $attr_code = $dup_attr[ $attr_code ];
          }
        }
      }
      fclose($fp);
      yaz_ccl_conf($search["id"], $attr_set);
    } else {
      $search["error"] = "Kan ikke åbne ccl2rpn-fil";
      verbose(ERROR, "ccl2rpn load error: " . $ccl_fn . " host:" . $search["host"] .  " database:" . $search["database"]);
    }
  } else {
    $search["error"] = "Der er ikke angivet en ccl2rpn-fil";
  }
  return(empty($search["error"]));
}

/* load ccl2rpn file from a z3950 connection
 *
 */
function private_z3959_load_attrset(&$search, $rpn) {
//global WEB_CACHE_PATH;

  

  $fn = WEB_CACHE_PATH . $search["database"] . "_ccl2prn_" . date("YmdH");
  if (is_file($fn))
    return($fn);

  global $TARGET;

  $z_attr = $TARGET["ccl2rpn"];
  $z_attr["rpn"] = trim($rpn);
  Zsearch($z_attr);
  //print_r($z_attr);

  if (empty($z_attr["hits"]) || 
      empty($z_attr["records"][1]["record"]) || 
      $z_attr["error"] || 
      $z_attr["records"][1]["error"])
    return(FALSE);

  // remove old files
  exec("rm " . WEB_CACHE_PATH . $search["database"] . "_ccl2prn_??????????");

  if ($fp = @ fopen($fn, "w")) {
    fwrite($fp, $z_attr["records"][1]["record"]);
    fclose($fp);
  } else
    return(FALSE);

  return($fn);
}

/* subs_rec
 *
 * Hjælper poster til at blive xml og udfylder place-holdere
 */
function private_subs_rec(&$rec, $target="", $cdata="", $record_sub="", $link_url_vars="") {
  global $CDATA, $RECORD_SUB;

  if (!$target) $target = "";
  if (!$cdata) $cdata = "";
  if (!$record_sub) $record_sub = "";
  if (!$link_url_vars) $link_url_vars = "";
  
// mark lines as CDATA to cope with <b>, <a ...
  if (!is_array($cdata)) $cdata = $CDATA;
  if (is_array($cdata))
    foreach ($cdata as $cd) {
      $rec = eregi_replace("(<$cd(>| [^>]*>))", "\\1<![CDATA[", $rec);
      $rec = eregi_replace("(</$cd>)", "]]>\\1", $rec);
    }

// @hex to hmtl-entity (@nnnn -> &#nnnn;)
  $rec = eregi_replace("@([0-9abcdef]{4})", "&#x\\1;", $rec);

  $rec = eregi_replace("(target=_TARGET_)([^>]*)(&anmeldelse=)", "target[]=$target\\2\\3", $rec);

  if (!is_array($record_sub)) $record_sub = $RECORD_SUB;
  if (is_array($record_sub))
    foreach ($record_sub as $rec_sub)
      switch ($rec_sub["type"]) {
        case "eval":
          $help = $rec_sub["to"];
          eval("\$help = \"$help\";");
          $rec = eregi_replace($rec_sub["from"], $help, $rec);
          break;
        case "getext":
          $to = Getext($rec_sub["to"]);
          if ($to)
            $rec = eregi_replace($rec_sub["from"], $to, $rec);
          break;
        default:
          $rec = eregi_replace($rec_sub["from"], $rec_sub["to"], $rec);
      }
}

function private_microtime_float() { 
   list($usec, $sec) = explode(" ", microtime()); 
   return ((float)$usec + (float)$sec); 
} 

function make_ccl_sub() {
	global $CCL_SUB, $CCL_SUB_FILES, $CCL_SUB_PREFIXES, $user_ccl, $set;

	$ccl_sub_tab = load_lang_tab("ccl_sub");
	$CCL_SUB = array();
	foreach ($ccl_sub_tab as $key => $val)
		$CCL_SUB[] = array("match" => $key, "replace" => $val);

	if (getext("cclsub_brugerselect")) {
		$CCL_SUB_FILES[] = "sogning_brugerselect";
		$CCL_SUB_PREFIXES[] = getext("cclsub_brugerselect");
	}
	$CCL_SUB = ExpandFromFile($CCL_SUB, $CCL_SUB_FILES, $CCL_SUB_PREFIXES);
	if ($set["origin"] != "kommando")
	  $user_ccl = str_replace($CCL_SUB['match'],$CCL_SUB['replace'], $user_ccl);
}

function EFF_trim($s) {
  return(ereg_replace("^[ \-]*", "", str_replace('&nbsp;','',strip_tags(strtolower($s)))));
}
function ExpandFromFile($CCL_SUB, $files, $prefixes) {
global $LINGO;

  $CCL_SUB_CACHE = CCL_SUB_CACHE . ".$LINGO";
  // hent CCL_SUB fra /tmp eller opret/opdater.
  if ( !is_file($CCL_SUB_CACHE) || date("Ymd", filemtime($CCL_SUB_CACHE)) < date("Ymd") ) { // ikke oprettet eller en dag gammel.

    while (list($key,$name) = each($files)) {
      $tab = load_lang_tab($name);
      while (list($key2,$val2) = each($tab)) {
        if ( !is_array($val2) ) {
          if ( !empty($val2) ) {
            $CCL_SUB[] = array ("match" => $val2, "replace" => $prefixes[$key].'&#61;'.EFF_trim($key2) );
          }
        } else {
          while (list($key3,$val3) = each($val2)) {
            if ( !is_array($val3) ) {
              if ( !empty($val3) ) {
                $prefix = ( $prefixes[$key] == 'instrumenter' ) ? $key2.': ' : $prefixes[$key].'&#61;';
                if ( substr($val3,0,3) == 'og ' )   $prefix = 'og '.$prefix; // instrumenter:genrer
                if ( substr($val3,0,5) == 'ikke ' ) $prefix = 'og '.$prefix; // sic!  -"-
                $CCL_SUB[] = array ("match" => $val3, "replace" => $prefix.EFF_trim($key3) );
              }
            }
          }
        }
      }
    }

    usort($CCL_SUB,"cmp_size"); reset($CCL_SUB);

    $fp = fopen($CCL_SUB_CACHE, 'w');
    if ( $fp ) {
      fwrite( $fp, serialize($CCL_SUB) );
      fclose($fp);
    }

    clearstatcache();

  } else {

    $filesize = filesize($CCL_SUB_CACHE);
    $fp = fopen($CCL_SUB_CACHE,"r");
    if ( $fp ) {
      $file = fread( $fp,$filesize );
      fclose( $fp );
    }
    $CCL_SUB = unserialize($file);

  }

  //while (list($key,$val) = each($CCL_SUB)) {

  foreach ($CCL_SUB as $val) {
    $sr["match"][]   = $val['match'];
    $sr["replace"][] = $val['replace'];
  }

  return $sr;

}

function get_num_hits() {
		global $set, $searches;
    $tg=$set["target"][0];
    return $searches[$tg]["hits"];
}

?>
